const pool = require("../../DB/mysql");

module.exports = async (req, res) => {
  console.log("./controllers/board/allQuestions");
  // category query 조건 분기로 let boardSql 문이 변경되는거죠.
  try {
    // cateogry 별 게시물 목록 보기 boardSql에 WHERE CATEGORY_ID = ? 추가 예정중

    // let boardSql = `SELECT * FROM BOARD_QA${
    //   req.query["category"]
    //     ? "WHERE CATEGORY_ID=" + req.query["category"] + ";"
    //     : ";"
    // }`;
    let boardSql = `SELECT * FROM BOARD_QA;`;

    const likeCountSql = `SELECT COUNT(BOARD_ID) AS LIKECOUNT FROM LIKES_BOARD WHERE BOARD_ID = ?;`;
    const answerCountSql = `SELECT COUNT(BOARD_ID) AS ANSWERCOUNT FROM ANSWER WHERE BOARD_ID = ?;`;
    const userSql = `SELECT USERNAME FROM USER WHERE USER_ID = ?;`;

    pool.query(boardSql, (err, result) => {
      if (err) {
        console.error(err);
        return res.status(501).json({ message: "DB Query Fail" });
      }

      Promise.all(
        result.map((element, index) => {
          const likeCountSqls = pool.format(likeCountSql, element.BOARD_ID);
          const answerCountSqls = pool.format(answerCountSql, element.BOARD_ID);
          const userSqls = pool.format(userSql, element.USER_ID);

          let promise = new Promise((resolve, reject) => {
            pool.query(
              likeCountSqls + answerCountSqls + userSqls,
              (err, rows) => {
                if (err) {
                  console.error(err);
                  return res.status(501).json({ message: "DB Query Fail" });
                }
                const { LIKECOUNT } = rows[0][0];
                const { ANSWERCOUNT } = rows[1][0];
                const { USERNAME } = rows[2][0];
                resolve({ LIKECOUNT, ANSWERCOUNT, USERNAME, index });
              } // end poll.query
            ); // end callback
          }); // end promise
          return promise.then((queryResult) => {
            result[queryResult.index].board_id =
              result[queryResult.index].BOARD_ID;
            result[queryResult.index].title = result[queryResult.index].TITLE;
            result[queryResult.index].likes = queryResult.LIKECOUNT;
            result[queryResult.index].author = queryResult.USERNAME;
            result[queryResult.index].modify_at =
              result[queryResult.index].MODIFY_DATE;
            result[queryResult.index].answers = queryResult.ANSWERCOUNT;
            result[queryResult.index].answered_user_id =
              result[queryResult.index].SELECTED_USER_ID;
            delete result[queryResult.index].BOARD_ID;
            delete result[queryResult.index].USER_ID;
            delete result[queryResult.index].CATEGORY_ID;
            delete result[queryResult.index].TITLE;
            delete result[queryResult.index].CONTENT;
            delete result[queryResult.index].CREATED_DATE;
            delete result[queryResult.index].MODIFY_DATE;
            delete result[queryResult.index].SELECTED_BREPLY_ID;
            delete result[queryResult.index].SELECTED_USER_ID;
          });
        })
      )
        .then(() => {
          return res.status(200).json({ result });
        })
        .catch((err) => {
          console.error(err);
          return res.status(501).json({ message: "Promise Fail" });
        }); // end Promise.all
    }); // end poll.query
  } catch (err) {
    console.error(err);
    return res.status(500).json({ message: "Internal Server Error" });
  }
};
